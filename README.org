* Athanor

  Athanor is a set of utilities for SQLAlchemy.  

  Athanor provides simple conveinence functions for common patterns
  found in many applications.  Tools should be selected as the
  situation calls for. SQLAlchemy is marvelous package; Athanor is not
  an attempt to eliminate SQLAlchemy.
  
  See Also - http://en.wikipedia.org/wiki/Athanor

** Examples
   #+BEGIN_SRC python

from sqlalchemy import Column, Integer, String
import athanor import BaseModel, StampedMixin, TrackedMixin

class User(BaseModel, StampedMixin):
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False, unique=True)

user = User.create(name='marc')

class Foo(BaseModel, StampedMixin, TrackedMixin):
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False, unique=True)

foo = Foo.create(name='xxx', user=user)

foo.get_by_name('marc')
foo.stamp(user)
foo.save()

   #+END_SRC

** BaseModel

   BaseModel is base class for SQLAlchemy mapped objects that provides
   a number of utilities to inspect, create, find, fetch and update
   objects/columns.  It also provides "magic finders" that will supply
   dynamic getters and finders such as get_by_foo and find_by_bar.

   Many of these utilities are familiar to Django's ORM.

*** Class Methods and Attributes
**** .__tablename__
***** Description  
      Automatically computes __tablename__ unless overriden as the
      plural of the words_with_underscores version of the class name.
      Override if the magic falls on it's face.

***** Example
      FooBar -> foo_bars
      
**** .objects
***** Description      
      The .objects attribute is query of all objects in the collection
      with no filters applied.  See SQLAlchemy's query_property.  The
      finders below use .objects so subclasses can override it if they
      need to apply any default options and criteria.

**** def get(cls, id):
***** Description
      Gets an object by the collection's primary key. Returns None if
      no object is found
***** Returns
      Returns an object if one exists or None if no object is found.
***** Example 
      Foo.get(1)

**** def get_by(cls, column, value):
***** Description
      Gets an object by a column and value.
***** Returns
      Returns an object if one exists or None if no object is found.
***** Example 
      Foo.get_by(Foo.id, 1)

**** def find(cls, criteria, order_by=None):
***** Description
      Find the objects of .objects matching criteria by order_by
***** Returns
      Returns an query of .objects with the criteria and order_by applied.
***** Example 
      Foo.find(and_(Foo.id > 10, Foo.id < 100))

**** def find_one(cls, criteria, order_by=None):
***** Description
      Find the first object of .objects matching criteria by order_by
***** Returns
      Returns and object or None is no such match exists.
***** Example 
      Foo.find_one(and_(Foo.id > 10, Foo.id < 100))

**** def create(cls, **data):
**** def get_or_create(cls, id, data, update=True):
**** def get_by_or_create(cls, column, value, data, update=True):
**** def find_or_create(cls, criteria, data, update=True):

*** Instance Methods

**** def __repr__(self):

**** def columns(self):
**** def relationships(self):
**** def primary_key(self):
**** def attributes(self):

**** def to_dict(self, include=None, exclude=None):

**** def __json__(self):

**** def update(self, data):
**** def save(self):
**** def delete(self):

** Types
*** UTCDateTime
**** Description
     UTCDateTime will take a time-zone aware datetime and store it as
     UTC in the database automatically.

** Mixins
*** StampedMixin
**** Description
     StampedMixin adds created_on and modified_on columns to a
     table. These columns will updated as needed. 

*** TrackedMixin
**** Description
     TrackedMixin adds created_by and modified_by columns to a table
     that relate to a User object.  Use the .touch(user) method to
     update modified_by.

** EAV

   Provides and Entity-Attribute-Value (aka vertical table) pattern 

   XXX - Document me!


** Shadow

   XXX - Implement me!
   XXX - Document me!

** Author
   Marc DellaVolpe (marc.dellavolpe@gmail.com)
