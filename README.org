* Athanor

  Athanor is a set of utilities for SQLAlchemy.  

  Athanor provides simple conveinence functions for common patterns
  found in many applications.  Tools should be selected as the
  situation calls for. SQLAlchemy is marvelous package; Athanor is not
  an attempt to eliminate SQLAlchemy.
  
  See Also - http://en.wikipedia.org/wiki/Athanor

** Examples

   See examples.py

** BaseModel

   BaseModel is base class for SQLAlchemy mapped objects that provides
   a number of utilities to inspect, create, find, fetch and update
   objects/columns.  It also provides "magic finders" that will supply
   dynamic getters and finders such as get_by_foo and find_by_bar.

   Many of these utilities are familiar to Django's ORM.

*** Class Methods and Attributes
**** .__tablename__
***** Description  
      Automatically computes __tablename__ unless overriden as the
      plural of the words_with_underscores version of the class name.
      Override if the magic falls on it's face.

***** Example
      FooBar -> foo_bars
      
**** .objects
***** Description      
      The .objects attribute is query of all objects in the collection
      with no filters applied.  See SQLAlchemy's query_property.  The
      finders below use .objects so subclasses can override it if they
      need to apply any default options and criteria.

**** def get(cls, id):
***** Description
      Gets an object by the collection's primary key. Returns None if
      no object is found
***** Returns
      Returns an object if one exists or None if no object is found.
***** Example 
      Foo.get(1)

**** def get_by(cls, column, value):
***** Description
      Gets an object by a column and value.
***** Returns
      Returns an object if one exists or None if no object is found.
***** Example 
      Foo.get_by(Foo.id, 1)

**** def find(cls, criteria, order_by=None):
***** Description
      Find the objects of .objects matching criteria by order_by
***** Returns
      Returns an query of .objects with the criteria and order_by applied.
***** Example 
      Foo.find(and_(Foo.id > 10, Foo.id < 100))

**** def find_one(cls, criteria, order_by=None):
***** Description
      Find the first object of .objects matching criteria by order_by
***** Returns
      Returns and object or None is no such match exists.
***** Example 
      Foo.find_one(and_(Foo.id > 10, Foo.id < 100))

**** def create(cls, **data):
***** Description
      Creates and object from data kwargs, adds it to the session and
      commits.  Override in subclass if you want to enforce behavior
      on creation (e.g. If you want to always pass in a created_by user)
***** Returns
      A the created object after it has been committed to the database.
***** Example
      Foo.create(user=user, name='marc')

**** def get_or_create(cls, id, data, update=True):
***** Description
      Attempts to fetch an object by given primary key.  If no object
      is found then an object will be created from the given data
      dictionary.  If update is True, existing objects will be
      updated from the data dictionary.
***** Returns
      Returns a tuple of the object and a boolean indicating whether
      or not it was created.
***** Example
      obj, created = Foo.get_or_create(1, {'name': 'marc', 'user': user})

**** def get_by_or_create(cls, column, value, data, update=True):
***** Description
      Attempts to fetch an object by given column and value.  If no object
      is found then an object will be created from the given data
      dictionary.  If update is True, existing objects will be
      updated from the data dictionary.
***** Returns
      Returns a tuple of the object and a boolean indicating whether
      or not it was created.
***** Example
      obj, created = Foo.get_by_or_create(Foo.name, 'marc', {'name': 'marc', 'user': user})

**** def find_or_create(cls, criteria, data, update=True):
***** Description
***** Returns
***** Example

*** Instance Methods

**** def __repr__(self):
***** Description
***** Returns
***** Example

**** def columns(self):
***** Description
***** Returns
***** Example

**** def relationships(self):
***** Description
***** Returns
***** Example

**** def primary_key(self):
***** Description
***** Returns
***** Example

**** def attributes(self):
***** Description
***** Returns
***** Example


**** def to_dict(self, include=None, exclude=None):
***** Description
***** Returns
***** Example


**** def __json__(self):
***** Description
***** Returns
***** Example


**** def update(self, data):
***** Description
***** Returns
***** Example

**** def save(self):
***** Description
***** Returns
***** Example

**** def delete(self):
***** Description
***** Returns
***** Example

** Types
*** UTCDateTime
**** Description
     UTCDateTime will take a time-zone aware datetime and store it as
     UTC in the database automatically.

** Mixins
*** StampedMixin
**** Description
     StampedMixin adds created_on and modified_on columns to a
     table. These columns will updated as needed. 

*** TrackedMixin
**** Description
     TrackedMixin adds created_by and modified_by columns to a table
     that relate to a User object.  Use the .touch(user) method to
     update modified_by.

** Author
   Marc DellaVolpe (marc.dellavolpe@gmail.com)
